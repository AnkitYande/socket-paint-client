{"version":3,"sources":["Board.js","App.js","reportWebVitals.js","index.js"],"names":["Board","props","canvasRef","useRef","useState","ctx","setCtx","isDrawing","setIsDrawing","socket","io","withCredentials","transports","emit","room","message","on","clearRect","current","width","height","window","onpopstate","disconnect","useEffect","init","console","log","buttonToggle","data","img","Image","src","drawImage","alert","lineWidth","size","strokeStyle","color","canvas","innerWidth","innerHeight","style","context","getContext","lineCap","addEventListener","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","base64Img","toDataURL","ref","class","randomWords","require","App","setColor","setSize","setRoom","finalRoom","setFinalRoom","setbuttonToggle","onSubmit","e","preventDefault","type","name","onChange","target","value","param","selected","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.219a0b67.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport io from \"socket.io-client\"\nimport './App.css';\n\nexport default function Board(props) {\n\n    const canvasRef = useRef(null);\n    const [ctx, setCtx] = useState(null);\n    const [isDrawing, setIsDrawing] = useState(false)\n\n    const socket = io(\"http://localhost:3001\", {\n        withCredentials: true,\n        transports: ['websocket', 'polling']\n    });\n    socket.emit('join-room', props.room, (message) => {\n        // alert(message)\n    })\n\n\n    socket.on(\"clear-canvas\", () => {\n        // console.log(\"clearing!!!\")\n        if (ctx)\n            ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    })\n\n    window.onpopstate = () => {\n        socket.disconnect();\n    }\n\n    const changeRoom = () => {\n        if (socket && props.room) {\n            socket.emit('join-room', props.room, (message) => {\n                alert(message)\n            })\n        }\n        init();\n        return () => { socket.disconnect(); }\n    }\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    useEffect(() => {\n        console.log(\"reset\")\n        if (ctx) {\n            ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n            socket.emit(\"clear-canvas\", props.room);\n        }\n    }, [props.buttonToggle]);\n\n    useEffect(() => {\n        if (socket) {\n            // console.log(\"getting data\")\n            socket.on(\"canvas-data\", (data) => {\n                var img = new Image();\n                img.src = data;\n                if (ctx)\n                    ctx.drawImage(img, 0, 0);\n            })\n        }\n    }, [socket])\n\n    useEffect(() => {\n        if (props.room) changeRoom();\n    }, [props.room]);\n\n    useEffect(() => {\n        if (ctx)\n            ctx.lineWidth = props.size;\n    }, [props.size, ctx])\n    useEffect(() => {\n        if (ctx)\n            ctx.strokeStyle = props.color;\n    }, [props.color, ctx])\n\n\n    const startDrawing = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        ctx.beginPath();\n        ctx.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n    };\n\n    const finishDrawing = () => {\n        ctx.closePath();\n        setIsDrawing(false);\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!isDrawing) {\n            return;\n        }\n        const { offsetX, offsetY } = nativeEvent;\n        ctx.lineTo(offsetX, offsetY);\n        ctx.stroke();\n\n        const base64Img = canvasRef.current.toDataURL(\"image/png\")\n        if (socket) {\n            socket.emit(\"canvas-data\", base64Img, props.room);\n        }\n    };\n\n    const init = () => {\n        const canvas = canvasRef.current\n        if (canvas) {\n            canvas.width = window.innerWidth * 0.8;\n            canvas.height = window.innerHeight * 0.75;\n            canvas.style.width = `${window.innerWidth * 0.8}px`;\n            canvas.style.height = `${window.innerHeight * 0.75}px`;\n\n            let context = canvas.getContext(\"2d\");\n            context.lineCap = \"round\";\n            // context.scale(2,2);\n            context.strokeStyle = props.color;\n            context.lineWidth = props.size;\n            setCtx(context);\n        }\n    }\n\n    window.addEventListener('resize', init);\n\n    return (\n        <canvas\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}\n            class=\"canvas\"\n        />\n    )\n}\n","import React, { useState } from \"react\";\nimport './App.css';\nimport Board from './Board.js'\nlet randomWords = require('random-words');\n\nfunction App() {\n\n  const [color, setColor] = useState(\"#000000\")\n  const [size, setSize] = useState(5)\n  const [room, setRoom] = useState(\"\");\n  const [finalRoom, setFinalRoom] = useState(\"\");\n  const [buttonToggle, setbuttonToggle] = useState(false);\n\n  const changeColor = (param) => {\n    setColor(param.target.value)\n  }\n\n  const changeSize = (param) => {\n    setSize(param.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setFinalRoom(room)\n    console.log(\"Changing to room\", room);\n  }\n\n  const handleReset = () => {\n    setbuttonToggle(!buttonToggle)\n    console.log(\"App resetting\");\n  }\n\n  const handleWord = () => {\n    alert(`${randomWords()}`)\n  }\n\n  return (\n    <div class=\"App\">\n      <div class=\"tool-picker\">\n\n        <div class=\"tool-cont\">\n          <h4>Enter Room</h4>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"room\"\n              onChange={e => setRoom(e.target.value)}\n            />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n\n        <div class=\"tool-cont\">\n          <h4>Select Color</h4>\n          <input type=\"color\" onChange={changeColor} />\n        </div>\n\n        <div class=\"tool-cont\">\n          <h4>Select Size</h4>\n          <select onChange={changeSize}>\n            <option>2</option>\n            <option selected>5</option>\n            <option>10</option>\n            <option>15</option>\n            <option>20</option>\n            <option>30</option>\n            <option>50</option>\n            <option>100</option>\n            <option>200</option>\n\n          </select>\n        </div>\n\n        <button onClick={handleReset}>Reset</button>\n\n      </div>\n\n      <div class=\"board-container\">\n        <Board\n          color={color}\n          size={size}\n          buttonToggle={buttonToggle}\n          room={finalRoom}\n        />\n      </div>\n\n      <div class=\"bottom-bar\">\n        <button onClick={handleWord}>Generate Word</button> \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}