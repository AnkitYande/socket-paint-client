{"version":3,"sources":["Board.js","App.js","reportWebVitals.js","index.js"],"names":["socket","io","withCredentials","transports","Board","lastX","lastY","room","size","color","buttonToggle","canvasRef","useRef","useState","ctx","setCtx","isDrawing","setIsDrawing","useEffect","canvas","current","setupCanvas","emit","clearCanvas","handleDrawData","x","y","drawLine","handleLoadCanvas","dataUrl","loadCanvas","handleClearCanvas","on","off","width","window","innerWidth","height","innerHeight","style","context","getContext","lineCap","x1","y1","x2","y2","strokeColor","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","img","Image","src","onload","drawImage","clearRect","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","toDataURL","onMouseMove","ref","className","randomWords","require","App","setColor","setSize","setRoom","finalRoom","setFinalRoom","setbuttonToggle","class","onSubmit","e","preventDefault","console","log","type","name","onChange","target","value","param","selected","onClick","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e80b45a5.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\n// Initialize Socket connection\nconst socket = \nio(\"http://localhost:3001\", {\n    withCredentials: true,\n    transports: [\"websocket\", \"polling\"],\n});\n\nexport default function Board({ room, size, color, buttonToggle }) {\n    const canvasRef = useRef(null);\n    const [ctx, setCtx] = useState(null);\n    const [isDrawing, setIsDrawing] = useState(false);\n    let lastX, lastY;\n\n    // On Init\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            setupCanvas(canvas);\n        }\n    }, []);\n\n    // On Room Change\n    useEffect(() => {\n        if (room) {\n            socket.emit(\"join-room\", room);\n            clearCanvas();\n            socket.emit(\"request-canvas\", room);\n        }\n    }, [room]);\n\n    // On Canvas Context Change\n    useEffect(() => {\n        const handleDrawData = ({ x, y, lastX, lastY, color, size }) => drawLine(lastX, lastY, x, y, color, size);\n        const handleLoadCanvas = (dataUrl) => loadCanvas(dataUrl);\n        const handleClearCanvas = () => clearCanvas();\n\n        socket.on(\"draw-data\", handleDrawData);\n        socket.on(\"load-canvas\", handleLoadCanvas);\n        socket.on(\"clear-canvas\", handleClearCanvas);\n\n        return () => {\n            socket.off(\"draw-data\", handleDrawData);\n            socket.off(\"load-canvas\", handleLoadCanvas);\n            socket.off(\"clear-canvas\", handleClearCanvas);\n        };\n    }, [ctx]);\n\n    // On Clear Btn Press\n    useEffect(() => {\n        if (ctx) {\n            clearCanvas();\n            socket.emit(\"clear-canvas\", room);\n        }\n    }, [buttonToggle]);\n\n\n    /*\n     * Canvas Helper Functions\n     */\n\n    const setupCanvas = (canvas) => {\n        canvas.width = window.innerWidth * 0.8;\n        canvas.height = window.innerHeight * 0.75;\n        canvas.style.width = `${window.innerWidth * 0.8}px`;\n        canvas.style.height = `${window.innerHeight * 0.75}px`;\n        const context = canvas.getContext(\"2d\");\n        context.lineCap = \"round\";\n        setCtx(context);\n    };\n\n    const drawLine = (x1, y1, x2, y2, strokeColor, lineWidth) => {\n        if (!ctx) return;\n        ctx.strokeStyle = strokeColor;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n    };\n\n    const loadCanvas = (dataUrl) => {\n        if (!ctx) return;\n        let img = new Image();\n        img.src = dataUrl;\n        img.onload = () => ctx.drawImage(img, 0, 0);\n    };\n\n    const clearCanvas = () => {\n        if (!ctx) return;\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    };\n\n\n    /*\n    * Handles user drawing interactions:\n    */\n    const startDrawing = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        setIsDrawing(true);\n        lastX = offsetX;\n        lastY = offsetY;\n    };\n\n    const finishDrawing = () => {\n        setIsDrawing(false);\n        socket.emit(\"save-canvas\", { room, dataUrl: canvasRef.current.toDataURL(\"image/png\") });\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!isDrawing) return;\n        const { offsetX, offsetY } = nativeEvent;\n        drawLine(lastX, lastY, offsetX, offsetY, color, size);\n        socket.emit(\"draw-data\", { x: offsetX, y: offsetY, lastX, lastY, color, size, room });\n        lastX = offsetX;\n        lastY = offsetY;\n    };\n\n    return (\n        <canvas\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}\n            className=\"canvas\"\n        />\n    );\n}\n","import React, { useState } from \"react\";\nimport './App.css';\nimport Board from './Board.js'\nlet randomWords = require('random-words');\n\nfunction App() {\n\n  const [color, setColor] = useState(\"#000000\")\n  const [size, setSize] = useState(5)\n  const [room, setRoom] = useState(\"\");\n  const [finalRoom, setFinalRoom] = useState(\"\");\n  const [buttonToggle, setbuttonToggle] = useState(false);\n\n  const changeColor = (param) => {\n    setColor(param.target.value)\n  }\n\n  const changeSize = (param) => {\n    setSize(param.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setFinalRoom(room)\n    console.log(\"Changing to room\", room);\n  }\n\n  const handleReset = () => {\n    setbuttonToggle(!buttonToggle)\n    console.log(\"App resetting\");\n  }\n\n  const handleWord = () => {\n    alert(`${randomWords()}`)\n  }\n\n  return (\n    <div class=\"App\">\n      <div class=\"tool-picker\">\n\n        <div class=\"tool-cont\">\n          <h4>Enter Room</h4>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"room\"\n              onChange={e => setRoom(e.target.value)}\n            />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n\n        <div class=\"tool-cont\">\n          <h4>Select Color</h4>\n          <input type=\"color\" onChange={changeColor} />\n        </div>\n\n        <div class=\"tool-cont\">\n          <h4>Select Size</h4>\n          <select onChange={changeSize}>\n            <option>2</option>\n            <option selected>5</option>\n            <option>10</option>\n            <option>15</option>\n            <option>20</option>\n            <option>30</option>\n            <option>50</option>\n            <option>100</option>\n            <option>200</option>\n\n          </select>\n        </div>\n\n        <button onClick={handleReset}>Reset</button>\n\n      </div>\n\n      <div class=\"board-container\">\n        <Board\n          color={color}\n          size={size}\n          buttonToggle={buttonToggle}\n          room={finalRoom}\n        />\n      </div>\n\n      <div class=\"bottom-bar\">\n        <button onClick={handleWord}>Generate Word</button> \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}